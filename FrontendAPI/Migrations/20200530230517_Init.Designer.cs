// <auto-generated />
using System;
using DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace FrontendAPI.Migrations
{
    [DbContext(typeof(ChannelContext))]
    [Migration("20200530230517_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DataAccess.DTO.Channel", b =>
                {
                    b.Property<Guid>("ChannelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ChannelSystemID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("FlowType")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("Modified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(50)");

                    b.HasKey("ChannelId");

                    b.HasIndex("ChannelSystemID");

                    b.ToTable("Channels");
                });

            modelBuilder.Entity("DataAccess.DTO.ChannelMessage", b =>
                {
                    b.Property<Guid>("TransactionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("MessageBody")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("Modified")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("ParentTransactionID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ProcessingStatus")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("ReceivedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("SourceChannelID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TargetChannelID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("TransactionID");

                    b.HasIndex("ParentTransactionID");

                    b.HasIndex("SourceChannelID");

                    b.HasIndex("TargetChannelID");

                    b.ToTable("ChannelMessages");
                });

            modelBuilder.Entity("DataAccess.DTO.ChannelSystem", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ContactID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(500)");

                    b.Property<DateTimeOffset>("Modified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(50)");

                    b.HasKey("ID");

                    b.HasIndex("ContactID");

                    b.ToTable("ChannelSystems");
                });

            modelBuilder.Entity("DataAccess.DTO.Contact", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("FirstName")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<DateTimeOffset>("Modified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Properties")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tel")
                        .HasColumnType("varchar(20)");

                    b.HasKey("ID");

                    b.HasIndex("Email");

                    b.HasIndex("FirstName", "LastName", "Email");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("DataAccess.DTO.LogEntry", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ChannelMessageTransactionID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("Modified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ServerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StackTrace")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TransactionID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.HasIndex("ChannelMessageTransactionID");

                    b.ToTable("Logs");
                });

            modelBuilder.Entity("DataAccess.DTO.Channel", b =>
                {
                    b.HasOne("DataAccess.DTO.ChannelSystem", null)
                        .WithMany("Channels")
                        .HasForeignKey("ChannelSystemID");
                });

            modelBuilder.Entity("DataAccess.DTO.ChannelMessage", b =>
                {
                    b.HasOne("DataAccess.DTO.ChannelMessage", "ParentTransaction")
                        .WithMany()
                        .HasForeignKey("ParentTransactionID");

                    b.HasOne("DataAccess.DTO.ChannelSystem", "SourceChannel")
                        .WithMany()
                        .HasForeignKey("SourceChannelID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.DTO.ChannelSystem", "TargetChannel")
                        .WithMany()
                        .HasForeignKey("TargetChannelID");
                });

            modelBuilder.Entity("DataAccess.DTO.ChannelSystem", b =>
                {
                    b.HasOne("DataAccess.DTO.Contact", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactID");
                });

            modelBuilder.Entity("DataAccess.DTO.LogEntry", b =>
                {
                    b.HasOne("DataAccess.DTO.ChannelMessage", null)
                        .WithMany("Logs")
                        .HasForeignKey("ChannelMessageTransactionID");
                });
#pragma warning restore 612, 618
        }
    }
}
